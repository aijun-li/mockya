// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../prisma/client"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:123456789@localhost:3456/mockya"
}

model User {
  id   String @id
  name String @unique

  Collection       Collection[]
  Rule             Rule[]
  RuleCondition    RuleCondition[]
  Matcher          Matcher[]
  MatcherCondition MatcherCondition[]
  Mock             Mock[]
  MockHeader       MockHeader[]
}

model Collection {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  id   String
  name String

  rules Rule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id, userId])
}

model Rule {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  id      Int
  name    String
  enabled Boolean @default(true)
  path    String  @default("")

  matchers   Matcher[]
  mocks      Mock[]
  conditions RuleCondition[]

  collectionId String
  collection   Collection @relation(fields: [collectionId, userId], references: [id, userId], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id, userId])
}

model RuleCondition {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  id    Int
  key   String @default("")
  value String @default("")

  ruleId Int
  rule   Rule @relation(fields: [ruleId, userId], references: [id, userId], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id, userId])
}

model Matcher {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  id      Int
  default Boolean @default(false)
  delay   Int     @default(0)

  conditions MatcherCondition[]

  ruleId Int
  rule   Rule @relation(fields: [ruleId, userId], references: [id, userId], onDelete: Cascade, onUpdate: Cascade)

  mockId Int
  mock   Mock @relation(fields: [mockId, userId], references: [id, userId], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id, userId])
}

model MatcherCondition {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  id    Int
  key   String @default("")
  value String @default("")

  matcherId Int
  matcher   Matcher @relation(fields: [matcherId, userId], references: [id, userId], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id, userId])
}

model Mock {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  id      Int
  name    String
  default Boolean      @default(false)
  headers MockHeader[]
  body    String       @default("")

  matchers Matcher[]

  ruleId Int
  rule   Rule @relation(fields: [ruleId, userId], references: [id, userId], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id, userId])
}

model MockHeader {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  id      Int
  key     String
  value   String  @default("")
  enabled Boolean @default(true)

  mockId Int
  mock   Mock @relation(fields: [mockId, userId], references: [id, userId], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id, userId])
}
